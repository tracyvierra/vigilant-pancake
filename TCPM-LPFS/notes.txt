print("Hello World!")  # print what is in parenthesis.

# square root without using a math module.
print(144**(1/2))

if 144**(1/2) == 12:
    print("The square root of 144 is 12.")
else:
    print("The square root of 144 is not 12.")

# to check if a number is even or odd:

num=int(input("Enter a number: "))
if num % 2 == 0:    # if the number is even a 0 is returned, if the number is odd a 1 is returned.
    print(f'{num} is even')
else:
    print(f'{num} is odd')


# to check if a number is positive or negative:
number=int(input("Enter a number: "))
if number > 0:
    print(f'{number} is positive')
elif number < 0:
    print(f'{number} is negative')
else:
    print(f'{number} is zero')
__________________________________________

__________________________________________

Notes & Section Summary for section 1:

What is Python:
Python is a widely used high-level, general-purpose, interpreted,dynamic programming language Python is founded by Guido van Rossum is a Dutch programmer who is best known as the author of the Python programming language.



Hello world program in Python:
The print function in Python allows us to print/display some text as the output.The simple line of code to display hello world is: print('Hello World').

You can use the general-purpose Python console to write Python code or you can use any IDE, which stands for Integrated Development Environment. PyCharm is the IDE which we have used in the course but you can use any IDE which supports Python.
 
 
Mathematical operations in Python.

We can perform mathematical operations like addition, subtraction, multiplication and division in Python. We can also perform some other operations like calculating exponent of any number. For example, to calculate square of number '4' we could type in 4**2 i.e 4 raised to power 2. Which is essentially calculating square of 4. In this manner we could calculate the exponent of any number. On similar terms, we could also calculate the square root of any number example 49**(1/2) which will give you the square root of number 49.
 
 
Strings in Python
Strings are among the most popular types in Python. We can create them simply by enclosing characters in quotes. Python treats single quotes the same as double quotes. Creating strings is as simple as assigning a value to a variable.
 
For example
var1 = 'Hello World!'
var2 = "Python Programming"



Accepting user input in Python 2
There are hardly any programs without any input.in most cases the input stems from the keyboard. For this purpose, Python provides the function input(). input has an optional parameter, which is the prompt string.
If the input function is called, the program flow will be stopped until the user has given an input and has ended the input with the return key. The text of the optional parameter, i.e. the prompt, will be printed on the screen.

The input of the user will be interpreted. If the user e.g. puts in an integer value, the input function returns this integer value. If the user on the other hand inputs a list,
 the function will return a list.
 

Accepting user input in Python 3

If the input function is called, the program flow will be stopped until the user has given an input and has ended the input with the return key. The text of the optional parameter, i.e. the prompt, will be printed on the screen.

The input of the user will be returned as a string without any changes.If this raw input has to be transformed into another data type needed by the algorithm, we can use casting function.


 
Variables in Python
Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.
Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals or characters in these variables. Python variables do not need explicit declaration to reserve memory space.
 The declaration happens automatically when you assign a value to a variable.  The equal sign (=) is used to assign values to variables.

The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. Python has five standard data types −

    Numbers
    String
    List
    Tuple
    Dictionary
__________________________________________

lists: 

listname = ["list_item1", "list_item2", "list_item3"]

index starts at 0 and moves right, or starts as -1 and moves left.

print list item by index:

print(listname[1])

The above will print list item 2 which is in index position 1.

create a blank list:

list = []

__________________________________________

Notes and summary for section 2


If statements in Python:
In order to write useful programs, we almost always need the ability to check conditions to change the behavior of the program accordingly. Conditional statements allow us to do so. The simplest form is the if statement, which has the general form:

if BOOLEAN EXPRESSION:
    STATEMENTS

A few important things to note about if statements:

The colon (:) is significant and required. It separates the header of the compound statement from the body.
The line after the colon must be indented. It is standard in Python to use four spaces for indenting.
All lines indented the same amount after the colon will be executed whenever the BOOLEAN_EXPRESSION is true.

The boolean expression after the if statement is called the condition. If it is true, then all the indented statements get executed. What happens if the condition is false,  In a simple if statement like this, nothing happens, and the program continues on to the next statement.
 

 
 Elif statement in Python:

Sometimes there are more than two conditions and we need more than two branches. In such cases we use the elif statement.elif is an abbreviation of else if. Again, exactly one branch will be executed. There is no limit of the number of elif statements but only a single (and optional) final else statement is allowed and it must be the last branch in the statement:


 if choice == 'a':
    print("You chose 'a'.")
elif choice == 'b':
    print("You chose 'b'.")
elif choice == 'c':
    print("You chose 'c'.")
else:
    print("Invalid choice.")
    
Each condition is checked in order. If the first is false, the next is checked, and so on. If one of them is true, the corresponding branch executes, and the statement ends.
 
 
Lists in Python:
Python has six built-in types of sequences, but the most common ones are lists and tuples.

There are certain things you can do with all sequence types. These operations include indexing, slicing, adding, multiplying, and checking for membership. In addition, Python has built-in functions for finding the length of a sequence and for finding its largest and smallest elements. The list is a most versatile datatype available in Python which can be written as a  list of comma-separated values (items) between square brackets. Important thing about a list is that items in a list need not be of the same type.
 
 
 Creating a list is as simple as putting different comma-separated values between square brackets

For example

listone = ['physics', 'chemistry', 1997, 2000];



List functions in Python


append() : to append an item to the list.
to append to a list named fruits, type in fruits.append("Banana")

function to calculate the length of the list:
print(len((fruits))
This line of code will print out the length of the list named fruits

Insert function:
This function allows you to insert some item to the list, this function is similar to append but
it allows you to insert item at a particular position.
example:
fruits.insert(1,"banana")
This line of code places the item banana at position 1 in the list fruits.

The index function.
it returns the index value / position of particular item in the list.
Example:
print(fruits.index("Peach"))
This line of code will return the index position of item Peach.

Range function in Python
The built-in range function in Python is very useful to generate sequences of
numbers in the form of a list.

The given end point is never part of the generated list;

range(10) generates a list of 10 values, the legal indices for items of a
sequence of length 10.

It is possible to let the range start at another number, or to specify a
different increment (even negative;

Sometimes this is called the ‘step’):

example:

>>> range(1,10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]

# You can use range() wherever you would use a list.

a = range(1, 10)
for i in a:
    print i

for a in range(21,-1,-2):
   print a,

#output>> 21 19 17 15 13 11 9 7 5 3 1

# We can use any size of step (here 2)
>>> range(0,20,2)
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

>>> range(20,0,-2)
[20, 18, 16, 14, 12, 10, 8, 6, 4, 2]

# The sequence will start at 0 by default.
#If we only give one number for a range this replaces the end of range value.
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# If we give floats these will first be reduced to integers.
>>> range(-3.5,9.8)
[-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]



Functions in Python:
A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing.

As you already know, Python gives you many built-in functions like print(), etc. but you can also create your own functions. These functions are called user-defined  functions.
 
Defining a function:
You can define functions to provide the required functionality. Here are simple rules to define a function in Python. Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ).

Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.

The first statement of a function can be an optional statement - the documentation string of the function or docstring.The code block within every function starts with a colon (:) and is indented.The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.

 Calling a function:
 Defining a function only gives it a name, specifies the parameters that are to be included in the function and structures the blocks of code.Once the basic structure of a function is finalized, you can execute it by
calling it from another function or directly from the Python prompt.



For loop in Python:
The for loop processes each item in a sequence, so it is used with Python’s sequence
data types - strings, lists, and tuples.Each item in turn is (re-)assigned to the loop variable,
 and the body of the loop is executed.

The general form of a for loop is:

for LOOP_VARIABLE in SEQUENCE:
    STATEMENTS

This is another example of a compound statement in Python, and like the branching statements, it has a header terminated by a colon (:)  and a body consisting of a sequence of one or more statements indented the same
 amount from the header.The loop variable is created when the for statement runs, so you do not need to
create the variable before then. Each iteration assigns the the loop variable to the next element in the sequence, and then executes the statements in the body. The statement finishes when the last element in the sequence is reached.This type of flow is called a loop because it loops back around to the top after each
iteration.



While loop in python
The general syntax for the while statement looks like this:

while BOOLEAN_EXPRESSION:
    STATEMENTS

Like the branching statements and the for loop, the while statement is a compound statement consisting of a header and a body. A while loop executes an unknown number of times, as long at the BOOLEAN EXPRESSION is true.

__________________________________________

Returning a value from a function:
The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.All the above examples are not returning any value. 

You can return a value from a function as follows −
 
 # Function definition is here
def sum( arg1, arg2 ):
   # Add both the parameters and return them."
   total = arg1 + arg2
   print "Inside the function : ", total
   return total;

# Now you can call sum function
total = sum( 10, 20 );
print "Outside the function : ", total



Passing functional arguments to functions:

We can also pass function as an argument to other function example:

def add(a,b):
    return a + b
def square(c):
    return c * c

square(add(2,3))



Modules in Python:
A module allows you to logically organize your Python code. Grouping related code into a module
makes the code easier to understand and use. A module is a Python object with arbitrarily named attributes that you can bind and reference.Simply, a module is a file consisting of Python code. A module can define functions, classes and variables.  A module can also include runnable code. You can use any Python source file as a module by executing an import statement in some other Python source file.

 example:
 import module_name
  Here module_name is the name of the module which contains the code which you want to use.
 
__________________________________________

Notes for section 4
 
 Errors and Exceptions:


Syntax Errors: Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python.
 
 Exceptions
 Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal. It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C or whatever the operating system supports).
 
 while True:
        try:
            x = int(raw_input("Please enter a number: "))
            break
        except ValueError:
            print "Oops!  That was no valid number.  Try again..."
            
            
The try statement works as follows.

First, the try clause (the statement(s) between the try and except keywords) is executed.If no exception occurs, the except clause is skipped and execution of the try statement is finished.If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its type matches the exception named after the except keyword, the except clause is executed, and then execution continues after the try statement.If an exception occurs which does not match the exception named in the except clause, it is passed on to outer try statements; if no handler is found, it is an unhandled exception and execution stops with a message as shown above.



File handling in python.

Python provides basic functions and methods necessary to manipulate files by default. You can do most of the file manipulation using a file object.

The open Function

Before you can read or write a file, you have to open it using Python's
 built-in open() function. This function creates a file object, which
 would be utilized to call other support methods associated with it.
 
 Syntax

file object = open(file_name [, access_mode])
Here are parameter details:
file_name: The file_name argument is a string value that contains the name of the file that you want to access.

access_mode: The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below  in the table. This is optional parameter and the default file access mode is read (r).
 
 r : Opens a file for reading only. The file pointer is placed at
 the beginning of the file. This is the default mode.
 
 rb : Opens a file for reading only in binary format.
 The file pointer is placed at the beginning of the file.
 This is the default mode.
 
 r+ : Opens a file for both reading and writing. The file pointer placed at the
 beginning of the file.
 
 rb+ : Opens a file for both reading and writing in binary format.
 The file pointer placed at the beginning of the file.


 w : Opens a file for writing only. Overwrites the file if the file exists.
 If the file does not exist, creates a new file for writing.
 
 wb : Opens a file for writing only in binary format. Overwrites the file if
 the file exists.
 If the file does not exist, creates a new file for writing
 
 a : Opens a file for appending. The file pointer is at the end of the file
 if the file exists. That is, the file is in the append mode. If the file
 does not exist, it creates a new file for writing.
__________________________________________

Notes for section 5:

Dictionaries in Python:
 Dictionary data structure in Python. A Dictionary (or "dict") is a way to store data just like a list,   but instead of using only numbers to get the data, you can use almost anything.
 
  Example:
  dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
  Accessing Values in Dictionary:

To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value.
print ("dict['Name']: ", dict['Name'])
print ("dict['Age']: ", dict['Age'])

Updating Dictionary

You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry.

example −

dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}

dict['Age'] = 8; # update existing entry
dict['School'] = "DPS School"; # Add new entry

Delete Dictionary Elements

You can either remove individual dictionary elements or clear the entire contents of a dictionary.You can also delete entire dictionary in a single operation.

del dict['Name']; # remove entry with key 'Name'
dict.clear();     # remove all entries in dict
del dict ;        # delete entire dictionary

Built-in Dictionary Functions & Methods −

Python includes the following dictionary functions

len(dict): Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.    

str(dict): Produces a printable string representation of a dictionary
    

type(variable): Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.

print(dictionary.get(key_number, "message if key not found here"))

Tuples in Python
A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.

Creating a tuple is as simple as putting different comma-separated values. Optionally you can put these comma-separated values between parentheses also. For example −

tup1 = ('physics', 'chemistry', 1997, 2000);
tup2 = (1, 2, 3, 4, 5 );
tup3 = "a", "b", "c", "d";

Accessing Values in Tuples:

To access values in tuple, use the square brackets for slicing along with the index or indices to obtain value available at that index.
 print ("tup1[0]: ", tup1[0])
__________________________________________

Notes for section 6


 
Functional programming in python
 
Functional programming is a general concept which states that the code should be contained in functions. 
Functional programming allows us to reuse the code as many number of times we want. It not only makes the code efficient but also maintainable. 
Functional programming can be implemented by the use of functions in our code.
 
 
Lambdas in Python
 
The lambda operator or lambda function is a way to create small anonymous functions, i.e. functions without a name. 
These functions are throw-away functions, i.e. they are just needed where they have been created. 
Lambda functions are mainly used in combination with the functions filter(), map() and reduce().


The general syntax of a lambda function is quite simple:
lambda argument_list: expression


The argument list consists of a comma separated list of arguments and the expression is an arithmetic expression using these arguments. 
You can assign the function to a variable to give it a name.


The following example of a lambda function returns the sum of its two arguments:

>>> f = lambda x, y : x + y
>>> f(1,1)
2



The map() Function:


The advantage of the lambda operator can be seen when it is used in combination with the map() function.
map() is a function with two arguments:

r = map(func, seq)

The first argument func is the name of a function and the second a sequence (e.g. a list) seq. map() applies the function func to all the elements of the sequence seq. 
It returns a new list with the elements changed by func.



Filtering:
The function filter(function, list) offers an elegant way to filter out all the elements of a list, for which the function function returns True.
The function filter(f,l) needs a function f as its first argument. 
f returns a Boolean value, i.e. either True or False. This function will be applied to every element of the list l. 
Only if f returns True will the element of the list be included in the result list.


Example:
>>> fib = [0,1,1,2,3,5,8,13,21,34,55]
>>> result = filter(lambda x: x % 2, fib)
>>> print (list(result))
[1, 1, 3, 5, 13, 21, 55]
>>> result = filter(lambda x: x % 2 == 0, fib)
>>> print (list(result))
[0, 2, 8, 34]
>>>



Generators:
Generators are a special kind of function, which enable us to implement or generate iterators.Iterators are a fundamental concept of Python.Mostly, iterators are implicitly used, like in the for loop of Python.
A generator is a function that produces a sequence of results instead of a single value. 
Generators are a simple and powerful possibility to create or to generate iterators. 
These iterators are called generator objects. On the surface they look like functions, but there is both a syntactic and a semantic difference. 
Instead of return statements you will find inside of the body of a generator only yield statements, i.e. one or more yield statements.
__________________________________________

Join a list to a string:

print(":".join(["Apple", "Banana", "Mango"])

Replace item in a string: 

print("Hello There".replace("There", "World"))

or

newstring = "Hello There"
print(newstring.replace("There", "World"))      # This will return a string with Hello World instead of Hello There, without changing the original string.

Check if a string starts or ends with a particular word:

newstring = "This is a string"
print(newstring.startswith("This"))     # This will return true as This is the first word in the string.
print(newstring.endswith("string"))     # This will return true as This is the last word in the string.

__________________________________________

Notes for section 7:

Object oriented programming in Python.Python has been an object-oriented language since it existed.
 Because of this, creating and using classes and objects are downright easy.
 
OOP Terminology

Class: A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.

Class variable: A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class's methods. Class variables are not used as frequently as instance variables are.
 
Inheritance: The transfer of the characteristics of a class to other classes that are derived from it.

Instance: An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.

Instantiation: The creation of an instance of a class.

Method: A special kind of function that is defined in a class definition.

Object: A unique instance of a data structure that's defined by its class. An object comprises both data members (class variables and instance variables) and methods.
 


 Recursion In Python:
 Recursion is a way of programming or coding a problem, in which a function calls  itself one or more times in its body. Usually, it is returning the return value of this function call. If a function definition fulfils the condition of recursion, we  call this function a recursive function.

 Recursive Functions in Python
 Example
 def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)
        
Sets in Python:
A set contains an unordered collection of unique and immutable objects. The set data type is,  as the name implies, a Python implementation of the sets as they are known from mathematics. This explains, why sets unlike lists or tuples can't have multiple  occurrences of the same element. 


 
Operator overloading:
The assignment of more than one function to a particular operator.Suppose you have created a Vector class to represent two-dimensional vectors, what happens when you use the plus operator to add them? Most likely Python will yell at you.

You could, however, define the __add__ method in your class to perform vector addition and then the plus operator would behave as per expectation −


Example

class Vector:
   def __init__(self, a, b):
      self.a = a
      self.b = b

   def __str__(self):
      return 'Vector (%d, %d)' % (self.a, self.b)
   
   def __add__(self,other):
      return Vector(self.a + other.a, self.b + other.b)

v1 = Vector(2,10)
v2 = Vector(5,-2)
print v1 + v2

When the above code is executed, it produces the following result −

Vector(7,8)

__________________________________________

function based example:

def abc():
    name = input("Enter name: ")
    age = input("Enter age: ")
    print(name)
    print(age)

abc() 


oop based example:

class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def get_data(self):
        self.name = input("Enter name: ")
        self.age = input("Enter age: ")

    def display(self):
        print(self.name)
        print(self.age)

student1 = Student("", "")
student1.get_data()
student1.display()

__________________________________________


__________________________________________


__________________________________________


__________________________________________


__________________________________________


__________________________________________